{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/09/05/hello-world/"},{"title":"Miscellaneous Notes","text":"Miscellaneous notes during the use of this blog. This is a personal notes that keeps track of all procedure, problems, tricks, etc. during the building and writing process of this blog. Hopes it will help someone, at least me, when I’d like to migrate to another blog or unfortunately I have to re-build my blog. Building NotesInstalling hexo is quite simple: just install it through npm. At 2022-09-06, the newest version of hexo is fully compatible with my workaround: Windows 11 + WSL 2 Ubuntu 20.04 LTS Node.js v18.x To install Node.js on Ubuntu, follow the official guide of installing Node.js binary distribution, where the commands are already included below. shell123curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -sudo apt-get install -y nodejsnpm install -g hexo-cli Initialize a Blog RepositoryFollowing the hexo official guide, run shell123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install Personally, I put my blog folder just in ~/fallcicada.github.io/, which is put in github repo fallcicada.github.io. Customization in BlogAs often mentioned in Chinese SNS, the end of customization is the default. I do not want to put much focus on the customization part of the blog. Except for a clean hexo theme Icarus, I made a few changes to my blog, mainly about the format of blogs. Hexo Theme IcarusTo install hexo theme Icarus, follow its Readme or its guide. Some possible dependencies should also be installed together. 12npm install -S hexo-theme-icarus hexo-renderer-infernohexo config theme icarus This will automatically modify your _config.yml, and will also create another theme-specific configuration file _config.icarus.yml at the same directory. Unlisted configuration is kept the same as default. To order the posts by newest-updated, rather than newest-posted, I changed index_generator.order_by to -updated. In addition, the highlight config should be carefully checked, as I have met several bugs due to inappropriate settings under this part. To ensure that 2 enters break a line rather than 1 enter, set marked.gfm: true in the config file, as in 回车就是换行和预览不一致异常问题. _config.yml >folded1234567891011121314151617181920212223242526272829# Basic Informationtitle: FallCicada's Blogsubtitle: ''suffix: FallCicadadescription: FallCicada's Personal Blogkeywords: - FallCicada - Blogauthor: FallCicadalanguage: entimezone: America/Los_Angelesurl: 'https://fallcicada.github.io/'index_generator: order_by: '-updated'highlight: enable: true line_number: true auto_detect: false tab_replace: marked: gfm: true pedantic: false sanitize: false tables: true breaks: false smartLists: true smartypants: true modifyAnchors: '' autolink: true As for Icarus-specific config, I removed a lot of unnecessary component, as noted below. Additionally, the logo, or any other image that needs to be placed in the website template, should be put in directory &lt;icarus directory&gt;/source/img/xxx, and be indexed as /img/xxx in config file. The directory of Icarus, installed directly through npm, should be &lt;blog directory&gt;/node_modules/hexo-theme-icarus. But there exists some bugs when the blog is deployed with Github Action. As a result, I manually moved Icarus from &lt;blog directory&gt;/node_modules/hexo-theme-icarus to &lt;blog directory&gt;/themes/icarus, which resolves most of the issues. _config.icarus.yml >folded123456789101112131415161718192021222324252627282930# Modified configlogo: /img/kaltsit_sticker.pnghead.favicon: /img/kaltsit_sticker.pngnavbar.links.My GitHub.url: https://github.com/FallCicadasidebar.left.sticky: trueplugins.katex: true# Commented out confighead.manifesthead.open_graphhead.structured_datahead.rsscommentdonatewidgets.profile.author_titlewidgets.profile.social_linkswidgets.linkswidgets.categorieswidgets.subscribe_emailwidgets.adsensewidgets.followitplugins.baidu_analyticsplugins.bing_webmasterplugins.busuanziplugins.cnzzplugins.cookie_consentplugins.google_analyticsplugins.hotjarplugins.statcounterplugins.twitter_conversion_tracking Page LayoutTo modify the page layout, follow the layout guide of Icarus theme. Personally, I modified the &lt;icarus_directory&gt;/layout/layout.jsx and &lt;icarus_directory&gt;/common/widgets.jsx to have a narrower widget column and wider content column. /layout/layout.jsx123456789 &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1,- 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2,- 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3+ 'is-8-tablet is-9-desktop is-9-widescreen': columnCount === 2,+ 'is-8-tablet is-9-desktop is-7-widescreen': columnCount === 3 /layout/common/widgets.jsx1234567891011 function getColumnSizeClass(columnCount) { switch (columnCount) { case 2:- return 'is-4-tablet is-4-desktop is-4-widescreen';+ return 'is-3-tablet is-3-desktop is-3-widescreen'; case 3:- return 'is-4-tablet is-4-desktop is-3-widescreen';+ return 'is-3-tablet is-3-desktop is-2-widescreen'; } return ''; } As Icarus uses the 12 columns system of bulma, the total width of the same type needs sum up to 12. For example, the modification above makes the width of widget column and content column in double-column desktop mode from 4:8 to 3:9. FontsThe style sheets for Icarus theme are available at themes/icarus/include/style/. To change the font, modify the $family-sans-serif and $family-code in base.styl. To change the font size of the articles, refer to article.styl and codeblock.styl. I have only made a few changes to the font size, which are listed below: themes/icarus/include/style/article.styl123456789101112- $article-font-size ?= 1.1rem+ $article-font-size ?= 1.0rem pre- font-size: .85em+ font-size: .95em code+ font-size: .95em padding: 0 background: transparent overflow-wrap: break-word themes/icarus/include/style/codeblock.styl123456 figcaption margin: 0 !important padding: .3em 0em .3em .75em font-style: normal- font-size: .8em+ font-size: 1.0em Custom Sticker Helper Functions(Note: the following 2 lines are deliberately left here.) Test. It works! To start with, the code for these emojis are just {% emoji EMOJI_NAME %}. To modify the theme (or, in other words, hexo) so that one can use hexo tags to add emojis conveniently to blog, you need to create an extra javascript file to register new tags to hexo. Although not mentioned in the doc of API of Tag, according to API of Helper, it is suggested that such javascript files should be placed at scripts/ or themes/&lt;theme_name&gt;/scripts/. I created a new file, themes/icarus/scripts/emoji.js, and write the following content to it: themes/icarus/scripts/emoji.js123456789101112const logger = require('hexo-log')();module.exports = hexo =&gt; { logger.info('=== Registering custom tag function of emoji ==='); hexo.extend.tag.register('emoji', function(args){ var emoji_path = args[0]; if (emoji_path.indexOf('.') &lt;= 0) { emoji_path = emoji_path + '.png' } return '&lt;img class=&quot;not-gallery-item&quot; src=&quot;/emoji/' + emoji_path + '&quot;&gt;'; });}; It is necessary to use class=&quot;not-gallery-item&quot; for such emojis to prevent them being recognized as normal images. And I also need to import this file in themes/icarus/scripts/index.js by adding the following lines at the end of the original file. themes/icarus/scripts/index.js1234/** * Register custom helper functions of emoji */require('./emoji')(hexo); Now, the custom tag on emoji will be registered for hexo! When you try to add an emoji in your blog, put them in sources/emoji/xxx.png, and insert it in your blog with {% emoji xxx.png %}. If the image is in png format, you can leave the .png part and simply use {% emoji xxx %}. This is really convenient, especially for those BBS users who are addicted to adding emojis in their posts, isn’t it? Writing BlogI am simply using VSCode + Markdown to write my blog. That’s the easiest but most effecient way for me. Deploying BlogI used Github Action to deploy my blog automatically after pushed to the main branch of my Github repo. The raw contents of my blog is pushed to the main branch of the repo, except the public/ folder not uploaded. An additional file .github/workflows/pages.yml is needed which describes what to do under what situation for Github Action. I used an almost the same file as this provided by hexo, except for the version of Node.js. The above content is completely sufficient for automatic deploy of hexo blog. For more detailed introduction of how Github Action works, refer to here. TODO Keep a note of my first CD ripping experience. Upload most of my undergraduate course materials to Github. Planning to add some stickers to my blog. It is worth to try to find a way like pattern matching and replacing to save the time of manually adding stickers in in-line form in my blog. Move my personal note from local onto the blog might be a good choice. Keep a diary, or weekly diary? Something like that might not be a bad choice. No other plans? I think the above plans are enough for a short-term workload, lol.","link":"/2022/09/10/misc-note/"},{"title":"Blog Writing Notes","text":"This is some notes during my blog-writing procedure. I will keep some interesting tricks, plugins, or tools inside this notes. Post TemplatesHexo guide Bulma活用 Bulma 美化 Icarus 文章 Tag PluginsTag Plugins Tag plugins should not be wrapped inside Markdown syntax, e.g. is not supported. Some Usage of Basic TagsRefer to Other PostsUse the {% post_link filename [title] [escape] %} tag to refer to other posts as the document describes. Basic usage: {% post_link blog-writing-notes 'Link with escape' %}, which looks like Link &lt;b&gt;with&lt;/b&gt; escape. {% post_link blog-writing-notes 'Link Without escape' false %}, which looks like Link Without escape. {% post_path blog-writing-notes %}, which gives the path rather than the hyperlink of post like /2022/09/08/blog-writing-notes/ &lt;a href=&quot;{% post_path blog-writing-notes %}#Refer-to-Other-Posts&quot;&gt;Link with anchor&lt;/a&gt;, which allows you to refer to some particular anchor of your post like Link with anchor Include a PDF fileThis is an additional hexo plugin hexo-pdf, which could be installed by npm install --save hexo-pdf. It supports both external links and relative file path with the pdf file placed locally. Basic usage: {% pdf https://blablabla/test.pdf %} {% pdf https://drive.google.com/file/d/xxxx/preview %} {% pdf //test.pdf %} Note that when referring to a local pdf file, the root directory for its path is the same as the root directory of the markdown file. For example, when referring to a PDF file placed in /source/files/test.pdf in /source/_posts/test.md, the correct tag should be {% pdf ../files/test.pdf %} rather than {% pdf ./files/test.pdf %} Adding EmojiI write a hexo tag for adding emojis conveniently, by inserting {% emoji EMOJI_NAME %} to the post. Check out the details here! For even more convenience, set a VSCode key biding like this. More specifically, go to File - Preferences - User snippets - markdown.json, and add the following lines: markdown.json1234567&quot;Add hexo user tag of emoji&quot;: { &quot;prefix&quot;: &quot;tag&quot;, &quot;body&quot;: [ &quot;{% emoji $0 %}&quot; ], &quot;description&quot;: &quot;Add a hexo user tag for emoji&quot;} The $0 means the cursor will stop at this position after inserting it. Then, navigate to File - Preferences - Keyboard shortcuts, and add the following: keybindings.json123456789{ &quot;key&quot;: &quot;ctrl+alt+E&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorTextFocus&quot;, &quot;args&quot;: { &quot;langId&quot;: &quot;markdown&quot;, &quot;name&quot;: &quot;Add hexo user tag of emoji&quot; }} Now, entering ctrl + alt + E will insert {% emoji %} for you!","link":"/2022/09/08/blog-writing-notes/"},{"title":"CD Ripping Experience Share","text":"As a game soundtrack collector and one who often listen to those music on CDs, it’s almost impossible to keep replacing CD from CD drive every an hour while listening. From the perspective of convenience in either music listening, management, storing, or sharing, it is really necessary to rip music from those CDs. This is a personal note for my CD ripping experience. I think it is worth of a post, at least the equipments which cost me several hundreds of dollars are worth of it (laugh). Preparation for CD RippingEquipmentsTo start with CD ripping, you should at least have a CD drive, undoubtedly. My personal equipments for CD ripping is somewhat bottommost hardware, considering I am just a newbie in CD ripping: Gotega External DVD Drive, USB 3.0 Portable CD/DVD Epson Perfection V39 Scanner During the ripping, I felt these following are also quite necessary: Disposable latex gloves Screen cleaner spray or wipes Normal wet wipes These really helps prevent grease or dirt adhering to the CD, booklet, or the screen of the scanner. Afterall, nobody likes some fingerprints to present on the scan of the CD and the booklet. Wearing a latex glove on one hand really helps to prevent this, or just wash your hands carefully with plenty of hand soups before CD ripping and scanning. SoftwareThe most important software, which rips music from CD, is EAC. The following of this article assumes using EAC v1.6. Installing EAC is a seemingly long and complicated procedure. Keep in mind that you need musics with best quality, and choose the corresponding configuration during the installation helps reduce most of the problems. After installation, go to EAC - EAC options, set both of the following to high: Extraction - Extraction and compression priority Extraction - Error recovery quality And check the box in Tools - Automatically write status report after extraction Tools - Append checksum to status report Then, go to EAC - Drive options, ensure it is set to Extraction Method - Secure mode ... (recommended) and have the following checked Drive has ‘Accurate Stream’ feature For a detailed installation guide, click here (sadly this guide is only available in Chinese). As for the scanner, simply install the driver and softward provided by its brand, because the software of scanner among different brands also differs much. CD RippingRipping ProcedureFor CD ripping, I roughly split it into multiple steps: Open EAC, insert the disc, and the music information will appear in the window. If necessary, click on second icon from the right (which is on the right side of Eject button) to search for CD information from database. It is possible to switch from different databases by clicking the select box next to the CD icon. If you decide to manually enter the CD information after ripping (for example, when detailed information is provided in the booklet of CD), you might skip this step. Click on Action - Detect Gaps, wait until gap detection finishes. Click on Action - Test &amp; Copy Image &amp; Create CUE Sheet, choose whatever of compressed (flac) or uncompressed (wav) based on your preference. Then choose a path of saving the ripped file, wait until ripping finished. Check the ripping log and listen to the audio to ensure no problem happens. Then you have a ripped CD! Remember to put your CD back to the box. After RippingThere are, actually, some post-works to be done. These works are often ignored and I have seen quite frequently that someone shared their CD with a CUE sheet in unknown encodings which caused inconvenience. Open your CUE sheet (the file ending with .cue suffix) with an appropriate editor, like VSCode or some other ones that supports you change the encoding of file. Check the encoding of your CUE sheet. In VSCode, it is at the bottom of the window. If your CUE sheet seems to contain a lot of corrupted characters, it is very probably that you opened the file in a wrong format. It everything seems to be OK, jump to step 4. Click on the encoding, select Reopen with Encoding, then select the first encoding which has a Guessed from content after it. Re-check if the CUE sheet looks OK with the new encoding. If problem still exists, check the following encodings, which are common in my personal experience: Simplified Chinese (GB 2312) Japanese (Shift JIS) Simplified Chinese (GBK) UTF-16 LE UTF-16 BE If the encoding of your CUE sheet is not in UTF-8, click on the encoding, select Save with encoding, then select UTF-8 to save your file in appropriate encoding format. Do this again to your log file. If you wish to share the CD in online platform, remove the personal information, like anonymize your file save path, in your log file. If you are not satisfied with the CD information found on the online databases, you can manually enter the information in your CUE sheet. The format of CUE sheet can be found here. My personal practice of CUE sheet formatting is to make a CUE sheet like this: Some Album DISC 1.cue12345678910111213REM DATE 2022/09/10REM DISCID xxxxxxxxPERFORMER &quot;Some Brand&quot;TITLE &quot;Some Album DISC 1&quot;FILE &quot;Some Album DISC 1.wav&quot; WAVE TRACK 01 AUDIO TITLE &quot;Some Song&quot; PERFORMER &quot;Some Singer&quot; INDEX 01 00:00:00 TRACK 02 AUDIO TITLE &quot;Some Other Song&quot; PERFORMER &quot;Some Other Singer&quot;... Where I mainly removed the remark of EAC version, and edit performer if it does not correspond to what appears on the booklet. I’m also used to name the audio file to {ALBUM_NAME} DISC {DISC_NUMBER}.wav, even if the album only have 1 disc. After all these long steps, you finally have a fully prepared ripped CD. Now put it to your music player, and enjoy it! ScanningObtain Original ScansScanning the an album includes scanning its cover / booklet, back / tray, CD, and possibly its obi. Wear a glove on at least one hand, or carefully wash hands with hand soups before taking them out to prevent leaving fingerprints on them. Take these parts out from your CD box, and scan each part with a scanner. If necessary, take off the staples from the booklet, and staple them back after scanning, which I personally rarely do. Cropping ScansAfter obtaining the scans (better in lossless form, like bmp, png, or tiff, differing with scanner), crop it manually to suitable sizes. I prefer to crop the scans manually, as the auto-cropping functionality provided by the scanner, in my case, crops much part of the image off. Booklet, Tray, ObiThe original scan of booklet from the scanner might look like this. I have tried several method to locate the boundary of this scan, but all of them failed as the background color and the color of the booklet are so close. Furthermore, automatic boundary detection also leaves some extra part, or results in a slightly skewed scan, both of which are what I do not want. Finally, to crop the scans as accurately as possible, I decide to use a noob method: manually find the coordinate of boundary points of the image. The cropping of the back and obi parts are exactly the same as the booklet, and here I just use a page from the booklet as an example. The most lightweighted app to find such coordinate, as I found, is the Microsoft Paint, lmao. Open the raw scan file, scale up it until you can accurately pick any pixel from it, and locate the coordinate the boundary point of the booklet like this: Note down all the coordinates of the boundary points of the booklet, which will be used in the next step: crop and transformation. data.py123456789101112131415# Coordinates of the 6 points, clockwise, from the top-left one.coordinates = { 'Album name': { './xxx.bmp': [...], './Booklet p. 01-02.bmp': [ ( 447, 156), (1879, 158), (3313, 144), (3320, 1549), (1888, 1565), ( 456, 1561), ], ... }} I then use the following python code to crop and transform the scan. crop.py12345678910111213141516171819202122232425262728293031323334353637383940414243# Note: python==3.10.0, opencv-python==4.6.0.66, numpy==1.21.5, imutils==0.5.4import cv2import osimport numpy as npfrom imutils.perspective import four_point_transformfrom data import coordinatesdef hconcat(img_list): h_min = min(img.shape[0] for img in img_list) img_list_resized = [ cv2.resize( img, (int(img.shape[1] * h_min / img.shape[0]), h_min), interpolation=cv2.INTER_CUBIC ) for img in img_list ] return cv2.hconcat(img_list_resized)def transform(img_path, img_points, blur_kernel_size=5, blur_radius=1): img_points = np.array(img_points) img = cv2.imread(img_path) # Get the name of image, and replace its suffix to png img_name = &quot;.&quot;.join(img_path.split(&quot;/&quot;)[-1].split(&quot;.&quot;)[:-1]) + &quot;.png&quot; if len(img_points) == 1: # This is for disc crop and rotation pass else: # Crop and transform print(f&quot;Crop and transform: {img_name}&quot;) assert (len(img_points) &gt;= 4 and len(img_points) % 2 == 0) transformed_parts = [] for i in range(len(img_points) // 2 - 1): # Transform each quadrilateral part of scan to rectangle indices = [i, i + 1, len(img_points) - 2 - i, len(img_points) - 1 - i] img_points_part = img_points[indices].reshape(4, 2) transformed_part = four_point_transform(img, img_points_part) transformed_parts.append(transformed_part) # Concatenate all transformed parts into one image transformed = hconcat(transformed_parts) cv2.imwrite(os.path.join(DRAFT_DIR, img_name), transformed)for file_name, points in coordinates[&quot;Album name&quot;].items(): transform(file_name, points) The final cropping results looks like this: You might noticed that the image still skews a bit, but this is due to the printing process rather than the scanning and cropping process, which actually can be seen from the raw scans. From my personal perspective, the above procedure already produces a quite satisfying result. DiscCropping of the disc is more complicated than cropping a rectangular booklet page. As for now, I can only find some straightforward way to handle it. Similarly, the first step of cropping a disc is to crop off the white background around it. In this step, use whatever method you like, to crop a disc like this: Then, use the built-in photo viewer of Windows 10 or Win 11 to open the disc image. Press ctrl + E or click Edit, and try to rotate the scan of disc until the image is upright. During this process, you can use the logo of brand, etc. to check if the image is upright or not. Then, write down the rotation angle (in this case \\(23.6^{\\circ}\\) clockwise). data.py12345678# Rotation degree of the disc scan. Negative value for clockwise rotation.coordinates = { 'Album name': { './xxx.bmp': [...], './Disc 1.bmp': [-23.6,], ... }} Use the following code to rotate the cropped disc. crop.py1234567891011121314151617181920212223242526272829# The same as above...from scipy.ndimage import rotatedef transform(img_path, img_points): # The same as above ... if len(img_points) == 1: # Crop and rotate print(f&quot;Crop and rotate: {img_name}&quot;) # Find the center and the radius of disc from cropped disc image radius = (img.shape[0] + img.shape[1]) // 4 center = np.array(img.shape[:2]) // 2 # Calculate the distance from each pixel to the center idx = np.indices(img.shape[:2]).transpose(1, 2, 0) dist = np.linalg.norm(idx - center, axis=2) # Mask out everything to white outside the disc masked_img = img.copy() masked_img[dist &gt; radius] = (255, 255, 255) # Apply a Gaussian blur to the boundary of the masked out part # Otherwise there will exist ugly jagged edges blurred_img = cv2.GaussianBlur(masked_img, (5, 5), 0) chosen_mask = np.tile((dist &gt; radius - 1)[..., np.newaxis], (1, 1, 3)) # Concatenate the blurred and unblurred part of image img = np.where(chosen_mask, blurred_img, img) transformed = rotate(img, angle=img_points[0], reshape=False, cval=255) cv2.imwrite(os.path.join(DRAFT_DIR, img_name), transformed) else: ... The final result looks like this: At least it looks satisfying enough for me! Album Management and ArchivingFinally, we have a fully ripped album, including all its audio files and scans! The last issue is how can we store it conveniently. As I am using foobar2000 as my music player, which supports listening to one directory (recursively!), I simply put each album in a separate folder like the following structure. 123456789101112131415161718192021222324C:\\User\\{USER_NAME}\\Music\\{FOLDER_NAME}\\|-- {ALBUM_NAME_1}| |-- bk| | |-- (all scans)| |-- Disc 1 [{CATALOG_NUMBER_DISC_1}]| | |-- {ALBUM_NAME} DISC 1.wav| | |-- {ALBUM_NAME} DISC 1.cue| | |-- cover.jpg| | |-- (optional) {ALBUM_NAME} DISC 1.log| | |-- (optional) back.jpg| | |-- (optional) disc.jpg| |-- Disc 2 [{CATALOG_NUMBER_DISC_2}]| | |-- {ALBUM_NAME} DISC 2.wav| | |-- {ALBUM_NAME} DISC 2.cue| | |-- cover.jpg| | |-- (optional) {ALBUM_NAME} DISC 2.log| | |-- (optional) back.jpg| | |-- (optional) disc.jpg| |-- cover.jpg| |-- README.txt||-- {ALBUM_NAME_2}| |-- ...... The images like cover.jpg in each Disc folder is used for foobar2000. It will automatically detect the cover image in the same directory of the audio file, and render it when playing that audio. The README.txt contains some basic information of the album, like its information page, or the source of the album especially when it is downloaded from the Internet. To archive the album, I simply use 7-zip to archive the complete folder and place it in my HDD. That’s all about my CD ripping experience, hope you find it useful somewhere! The details of the content of each file, as well as the configuration of foobar2000, will be shared in Music Record - ACG OST, which is another hard task to be finished!","link":"/2022/09/11/cd-rip/"},{"title":"Music Record - ACG OST","text":"INCOMPLETE! This is a record for part of my music, most of which are from ACG OST (Original Soundtracks) from Japanese. I have spent quite a few time to collect, organize and rate these music and it really bothered me twice to lose my record for them. Also, I’ve been putting quite a bit of energy and time configuring foobar2000 to make it convenient to use. Finally I managed to find a great way to keep a record backup of my music so that I am no longer afraid of migrating to another PC or lose my record by accident, and I decide to write an article to keep a record for both my usage of foobar2000 and my music record. TODO","link":"/2022/09/11/music-record-acg/"}],"tags":[{"name":"Miscellaneous","slug":"Miscellaneous","link":"/tags/Miscellaneous/"},{"name":"Notes","slug":"Notes","link":"/tags/Notes/"},{"name":"Music","slug":"Music","link":"/tags/Music/"},{"name":"ACG","slug":"ACG","link":"/tags/ACG/"},{"name":"OST","slug":"OST","link":"/tags/OST/"},{"name":"Record","slug":"Record","link":"/tags/Record/"},{"name":"Technical","slug":"Technical","link":"/tags/Technical/"}],"categories":[{"name":"Miscellaneous","slug":"Miscellaneous","link":"/categories/Miscellaneous/"},{"name":"Music","slug":"Music","link":"/categories/Music/"}],"pages":[{"title":"About","text":"This page contains only my Github page and my CV! I will find another time to complete this page. Personal CV","link":"/about/index.html"},{"title":"文章分类","text":"","link":"/categories/index.html"}]}